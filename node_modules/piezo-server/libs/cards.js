/*!
 * Module: Module
 *
 * @author Andjey Guzhovskiy, <me.the.ascii@gmail.com>
 * @copyright (c) 2013 Andjey Guzhovskiy
 * @licence CLOSED
 * @version 0.0.1
 */

var util = require( 'util' ),
    mongo = require( 'mongodb' ),
    ObjectID = require( './utils/objectid' ),
    async = require( 'async' ),
    colors = require( 'colors' ),
    auth = require( './auth' ),
    //_ = require( 'underscore' ),

    client,
    collection,
    config = {
        // connection
        port: 27017,
        host: 'localhost',
        write: 1,
        // data
        database: 'test',
        collection: 'cards'
    },

    // ---
    cards = [{
        type: 'person',
        account_id: '',
        name: '',
        birth: {
            date: '',
            month: '',
            year: ''
        },
        phone: ''
    }, {
        type: 'agree',
        account_id: '',
        age: false,
        rules: false,
        info: false
    }, {
        type: 'cigarettes',
        account_id: '',
        frequently: {
            brand: '',
            sku: ''
        },
        occasionally: {
            brand: '',
            sku: ''
        }
    }];


// Base

exports.app = null;
exports.configure =
    function( cfg ) {
        var cfg = cfg || {},
            defaults = cfg.defaults || {};

        // config
        if ( cfg.host
            || defaults.mongodb.host )
            config.host = cfg.host || defaults.mongodb.host;
        if ( cfg.port
            || defaults.mongodb.port )
            config.port = cfg.port || defaults.mongodb.port;
        if ( cfg.database
            || defaults.mongodb.database )
            config.database = cfg.database || defaults.mongodb.database;
        if ( cfg.collection
            || defaults.mongodb.collection )
            config.collection = cfg.collection || defaults.mongodb.collection;
    };

exports.init =
    function( libs, callback ) {

        // database
        client = new mongo.Db(
            config.database,
            new mongo.Server( config.host, config.port, { auto_reconnect: true }),
            { w: config.write }
        );

        client.on( 'error', function( err ) {
            console.log( 'catch:'.bold.red, err );
        });

        // connect db
        client.open( function( err, _client ) {
            if ( err ) {
                console.log( 'Error: Auth connect database:'.bold.red, err );
                process.exit( 2 );
            }
            client.collection( config.collection,
                function( err, coll ) {
                    if ( err ) {
                        console.log( 'Error: Auth database collection:'.bold.red, err );
                        process.exit( 2 );
                    }
                    collection = coll;

                    // success
                    console.log( 'Cards storage:'.magenta, 'mongo at', config.host +':'+ config.port +'/'+ config.database );
                    if ( callback ) callback();
                });
        });
    };


// Cards ( collection )

function count( query, opts, callback ) {

}

function list( query, opts, callback ) {

    // todo: fields

    // use options
    // get docs by query

    // args
    if ( 'function' == typeof opts )
        var callback = opts,
            opts = {};
    if ( !callback ) return;

    // options
    if ( !opts ) opts = {};

    // gather
    collection
        .find( query, [], opts || {} )
        .toArray(
            function( err, docs ) {
                callback( err, docs );
            });

}

function clear( query, opts, callback ) {
    // use options
    // remove docs by query

}

exports.count = count;
exports.list = list;
exports.clear = clear;


// Card ( model )

/**
 * Reserved card fields ( keys ):
 *
 *  * account_id {ObjectID}
 *  * type {String}
 */

function create( card, opts, callback ) {
    // args
    if ( 'function' == typeof opts )
        var callback = opts,
            opts = {};
    if ( !callback ) return;
    if ( !card || !card.type /*|| !card.account_id*/ )
        return callback( new Error( 'Bad card' ));

    // options
    if ( !opts ) opts = {};
    if ( undefined === opts.exists )
        opts.exists = true;

    // call async
    var queue = [];

    if ( card.account_id ) {

        if ( opts.exists )
            // step 1 - check the card of this type is already exists
            queue.push( function( next ) {
                collection.count(
                    {
                        account_id: card.account_id,
                        type: card.type
                    },
                    /*opts || {},*/
                    function( err, count ) {
                        if ( err ) next( err );
                        else
                        if ( count ) next( new Error( 'Account already has a card of this type' ));
                        else
                        next();
                    });
            });

            // step 2 - check is exists account
            queue.push( function( next ) {
                auth.byId( card.account_id,
                    function( err, account ) {
                        if ( err ) next( err );
                        else
                        if ( !account ) next( new Error( 'Not exists account' ));
                        else
                        next( null, account );
                    });
            });
    }

    queue.push(
        // step 3 - create
        function( next ) {
            console.log('card', card );
            console.log('opts', opts );

            collection.insert( card, opts || {}, next );
        });

    async.series( queue, function( err, res ) {
        if ( err ) return callback( err );
        var docs = res.pop();
        callback( null, docs.length && docs.pop() );   // last = results of creation
    })
}


function get( query, opts, callback ) {
    // args
    if ( 'function' == typeof opts )
        var callback = opts,
            opts = {};
    if ( 'string' == typeof query )
        query = { _id: ObjectID( query )};

    // get
    console.log( 'get card:', query );
    collection.findOne( query, opts || {}, callback );
    // collection.findOne( query, opts || {}, function(err, result){
    //     console.log( result );
    // });
}

function update( query, card, opts, callback ) {
    // args
    if ( 'function' == typeof opts )
        var callback = opts,
            opts = {};
    if ( 'string' == typeof query )
        query = { _id: ObjectID( query )};

    if ( !callback ) return;
    if ( !card /* || !card.type || !card.account_id*/ )
        return callback( new Error( 'Bad card' ));
    // options
    if ( !opts ) opts = {};

    // todo: make possible to change `account_id` and `type`
    // todo: if change account_id, check for exists card of this type

    // constants
    delete card._id;
    delete card.type;
    delete card.account_id;

    // set values
    // set modifiers
    var values = {};
    for ( var key in card ) {
        // modifier
        if ( '$' == key.substr( 0, 1 )) {
            values[ key ] = card[ key ];
            delete card[ key ];
        }
    }
    values.$set = card;

        // save
    opts.safe = true;
    collection.update( query, values, opts, function( err, res, info ) {
        callback( err, !!res );
    });
    // todo: findAndUpdate
}

function remove( query, opts, callback ) {
    // args
    if ( 'function' == typeof opts )
        var callback = opts,
            opts = {};
    if ( 'string' == typeof query )
        query = { _id: ObjectID( query )};
    if ( !opts ) opts = {};

    // get exists
    list( query, opts, function( err, exists ) {
        if ( err ) return callback( err );
        // remove
        if ( undefined === opts.single ) opts.signle = true;
        collection.remove( query, opts, function( err, res ) {
            if ( err ) return callback( err );
            callback( null, exists );
        });
    });
}

exports.create = create;
exports.get = get;
exports.update = update;
exports.remove = remove;
exports.ObjectID = ObjectID;
exports.collection = collection;