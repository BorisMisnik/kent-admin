/*!
 * Module: Module
 *
 * @author Andjey Guzhovskiy, <me.the.ascii@gmail.com>
 * @copyright (c) 2013 Andjey Guzhovskiy
 * @licence CLOSED
 * @version 0.0.1
 */

var // libs
    util = require( 'util' ),
    express = require( 'express' ),
    path = require( 'path' ),
    passport = require( 'passport' ),
    colors = require( 'colors' ),
    cons = require( 'consolidate' ),
    dustjsHelpers = require( 'dustjs-helpers' ),
    MongoStore = require( 'connect-mongo' )( express ),
    //
    auth = require( './auth' ),
    parent = require( './utils/parent' ),
    // local
    app,
    listen = false,
    configFilePath = path.join( path.dirname( parent.first().filename ), '/config.json' ),
    configFile = require( configFilePath ),
    config = {
        port: 3000,
        host: '0.0.0.0',
        session: {
            secret: 'qwerty',
            age: 60 * 60 * 1000     // 1 hour
        },
        uploads: path.join( path.dirname( parent.first().filename ), '/tmp' ),
        routes: [],
        static: [],
        vhosts: []
    };


// Boot

// server hub
app = express();
// configure Express
app.configure(function() {

//    // teplate
//    app.set( 'views', __dirname + '/views' );
//    app.set( 'view engine', 'ejs' );

    // view
    app.engine( 'html', cons.dust );
    app.set( 'view engine', 'html' );
    app.set( 'views', path.join( path.dirname( parent.first().filename ), '/views' ));

    //app.use( express.logger() );
    app.use( express.cookieParser() );
    app.use( express.bodyParser() );
    app.use( express.methodOverride() );

    // sessions
    app.use( express.session({
        secret: config.session.secret,
        maxAge: config.session.age,
        store: new MongoStore({
            host: configFile.defaults.mongodb.host,
            port: configFile.defaults.mongodb.port,
            db: configFile.defaults.mongodb.database,
            collection: 'sessions'
        })
    }));
});


// Base

exports.app = app;
exports.configure =
    function( cfg ) {
        var cfg = cfg || {},
            statics = [],
            routes;

        // config
        if ( cfg.host )
            config.host = cfg.host;
        if ( cfg.port )
            config.port = cfg.port;
        if ( cfg.vhosts )
            config.vhosts = config.vhosts.concat( cfg.vhosts );
        // session
        if ( cfg.session ) {
            if ( cfg.session.secret )
                config.session.secret = cfg.session.secret;
            if ( cfg.session.age )
                config.session.age = cfg.session.age;
        }

        // routes
        if ( routes = cfg.routes ) {
            if ( !util.isArray( routes ))
                routes = [ routes ];
            config.routes =
                config.routes.concat( routes );
        }

        // static
        if ( cfg.static ) {
            statics = util.isArray( cfg.static )
                ? cfg.static
                : [ cfg.static ];
            statics.forEach( function( params ) {

                // is string
                if ( 'string' == typeof params )
                    config.static.push({
                        path: params
                    });
                else
                // is object
                if ( params.path )
                    config.static.push({
                        path: params.path,
                        name: params.url
                    });

            });
        }

        // uploads
        if ( cfg.uploads ) {
            config.uploads = path.join( path.dirname( parent.first().filename ), '/', cfg.uploads )
        }
    };

exports.init =
    function( libs, callback ) {

        // init once
        if ( listen ) return;
        listen = true;

        // debug
//        app.use( fn );
//        function fn( req, res, next ) {
//            console.log( 'browser:'.red, req.method, req.url, req.headers, req.body );
//            next();
//        }

        // auth
        app.use( passport.initialize() );
        app.use( passport.session() );
        // passport-remember-me
        app.use( passport.authenticate( 'remember-me' ));
        app.post( '/login',
            //passport.authenticate('local', { failureRedirect: '/login' }),
            function( req, res, next ) {
                passport.authenticate( 'local', function( err, user, info ) {
                    if ( err ) return next( err );
                    if ( !user ) return res.send( 401 );
                    // remove old cookie
                    res.clearCookie( 'remember_me' );
                    // Issue a remember me cookie if the option was checked
                    if ( !req.body.remember_me ) { return next(); }
                    auth.issueToken( user, function( err, token ) {
                        if ( err ) { return next( err ); }
                        res.cookie( 'remember_me', token, { path: '/', httpOnly: true, maxAge: 604800000 });
                        return next();
                    });
            })( req, res, next );
        });
        app.get( '/logout', function( req, res, next ) {
            // clear the remember me cookie when logging out
            var token = req.cookies && req.cookies.remember_me;
            if ( token )
                // remove token from db
                auth.removeToken( token );
            res.clearCookie( 'remember_me' );
            //req.logout();
            next();
        });


        // vhosts

        // uploads
        if ( config.uploads ) {
            app.use( express.bodyParser({
                keepExtensions: true,
                uploadDir: config.uploads
            }));
        }

        // routes
        if ( config.routes.length )
            config.routes.forEach( addRoute );

        // static
        if ( config.static.length ) {
            app.use( app.router );
            // each
            config.static.forEach(
                function( mount ) {
                    // var dir = path.join( process.cwd(), mount.path );
                    var dir = path.join( path.dirname( parent.first().filename ), '/', mount.path );
                    console.log( 'Static path:'.green, mount.url || '/', 'at', dir );
                    if ( mount.url ) app.use( mount.url, express.static( dir ));
                    else app.use( express.static( dir ));
                });
        }

        // bind
        app.set( 'port', config.port );
        app.set( 'host', config.host );
        app.listen(
            app.get( 'port' ),
            app.get( 'host' ),
            function() {
                console.log( 'Listen http on'.magenta, app.get( 'host' ) +':'+ app.get( 'port' ));
                if ( callback ) callback();
            });
    };


// API

exports.addRoute = addRoute;
function addRoute( route ) {
    console.log( 'Add http route:'.green, route.method, route.url );
    var
    // config
        method,
        url = route.url || '/',
        dir,
        script,
        handler,
        acl = route.auth || {},
    // locals
        action;

    // params
    if ( route.script && route.handler ) {
        try {
            dir = path.dirname( parent.first().filename );
            script = require( path.join( dir, route.script ));
            //script = require( path.join( __dirname, route.script ));
            handler = script[ route.handler ];
        } catch( err ) {
            console.log( 'Error:', route.script, err );
        }
        if ( 'function' != typeof handler )
            return console.log( 'Error load http handler', route.script + '::' + route.handler );
    }
    // no handler - next to express
    if ( !handler )
        handler = function( req, res, next ) {
            next();
        };

    // request method
    if ( route.method
        && !!~[ 'post', 'get', 'put', 'delete' ]
            .indexOf( route.method ))
        method = app[ route.method ].bind( app );

    if ( 'function' != typeof method )
        return console.log( 'Bad http method' );

    // -- no authorize
    if ( !Object.keys( acl ).length ) {
        method( url, handler );
    } else
    // -- make user login
    if ( acl.login ) {
        method( url || '/login',
            auth.app.authenticate( 'local', {
                successRedirect: acl.success,   // || '/',
                failureRedirect: acl.fail       // || '/login'
            }), handler );
    } else
    // -- only if logged in
    if ( acl.logged ) {
        method( url,
            auth.logged.bind( app, {
                fail: acl.fail                  // || '/login'
            }), handler );
    } else
    // -- by listed roles
    if ( acl.roles
        && acl.roles.length ) {
        method( url,
            auth.roles.bind( app, {
                roles: [].concat( acl.roles ),
                fail: acl.fail                  // || '/login'
            }), handler );
    }
}