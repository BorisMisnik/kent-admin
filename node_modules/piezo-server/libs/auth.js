/*!
 * Authorization System
 *
 * @author Andjey Guzhovskiy, <me.the.ascii@gmail.com>
 * @copyright (c) 2013 Andjey Guzhovskiy
 * @licence CLOSED
 * @version 0.0.1
 */

var express = require( 'express' ),
	passport = require( 'passport' ),
	LocalStrategy = require( 'passport-local' ).Strategy,
	RememberMeStrategy = require( 'passport-remember-me' ).Strategy,
	crypto = require( 'crypto' ),
	mongo = require( 'mongodb' ),
	ObjectID = require( './utils/objectid' ),
	colors = require( 'colors' ),
	//
	client,
	collection,
	collectionTokens,
	config = {
		// connection
		port: 27017,
		host: 'localhost',
		write: 1,
		// data
		database: 'test',
		collection: 'accounts',
		collectionTokens: 'tokens',
		// roles
		roles: [ 'admin', 'operator', 'visitor' ]
	};


// Base

exports.app = passport;
exports.configure =
	function( cfg ) {
		var cfg = cfg || {},
			defaults = cfg.defaults || {};

		// config
		if ( cfg.host
			|| defaults.mongodb.host )
			config.host = cfg.host || defaults.mongodb.host;
		if ( cfg.port
			|| defaults.mongodb.port )
			config.port = cfg.port || defaults.mongodb.port;
		if ( cfg.database
			|| defaults.mongodb.database )
			config.database = cfg.database || defaults.mongodb.database;
		if ( cfg.collection
			|| defaults.mongodb.collection )
			config.collection = cfg.collection || defaults.mongodb.collection;
	};

exports.init =
	function( libs, callback ) {

		// database
		client = new mongo.Db(
			config.database,
			new mongo.Server( config.host, config.port, { auto_reconnect: true }),
			{ w: config.write }
		);

		client.on( 'error', function( err ) {
			console.log( 'catch:'.bold.red, err );
		});

		// connect db
		debugger;
		client.open( function( err, _client ) {
			if ( err ) {
				console.log( 'Error: Auth connect database:'.bold.red, err );
				process.exit( 2 );
			}
			// callback
			var count = 2;
			function end() {
				if ( --count ) return;
				if ( callback ) callback();
			}
			// accounts collection
			client.collection( config.collection,
				function( err, coll ) {
					if ( err ) {
						console.log( 'Error: Auth database collection:'.bold.red, err );
						process.exit( 2 );
					}
					collection = coll;
					// success
					console.log( 'Authotization storage:'.magenta, 'mongo at', config.host +':'+ config.port +'/'+ config.database );
					end();
				});
			// tokens collection
			client.collection( config.collectionTokens,
				function( err, coll ) {
					if ( err ) {
						console.log( 'Error: Auth database tokens-collection:'.bold.red, err );
						process.exit( 2 );
					}
					collectionTokens = coll;
					// success
					console.log( 'Tokens storage:'.magenta, 'mongo at', config.host +':'+ config.port +'/'+ config.database );
					end();
				});
		});
	};


// Session

passport.serializeUser(
	function( user, done ) {
		//console.log( 'serializeUser', user );
		done( null, user._id );
	});

passport.deserializeUser(
	function( id, done ) {
		//console.log( 'deserializeUser', id );
		findById( id, function( err, user ) {
			//console.log( 'deserializeUser result:', err, user );

			if ( !user.active )
				return done( null, false, { message: 'Inactive user' });
			done( err, user );
		});
	});

// Middlewares

passport.use( new LocalStrategy(
	function( username, password, done ) {
		console.log( 'Login LocalStrategy', username, password );
		process.nextTick( function () {
				findByUsername( username, function( err, user ) {
					// args
					if ( err || !user )
						return done( err );
					if ( !user )
						return done( null, false, { message: 'Unknown user ' + username });
					// not active
					if ( !user.active )
						return done( null, false, { message: 'Inactive user' });
							  
					// authorize
					// plain password
					if ( user.password ) {
						if ( user.password !== password )
							return done( null, false, { message: 'Invalid password' });
					} else
					// md5 hash
					if ( user.hash ) {
						var hash = crypto
							.createHash( 'md5' )
							.update( password )
							.digest( 'hex' );
						if ( user.hash !== hash )
							return done( null, false, { message: 'Invalid password' });
					} else {
						return done( null, false, { message: 'Invalid user record (no password)' });
					}

					// success results
					return done( null, user );
				});
		});
	}
));

// Remember Me cookie strategy
// https://github.com/jaredhanson/passport-remember-me/blob/master/examples/login/server.js
passport.use( new RememberMeStrategy(
	function( token, done ) {
		consumeRememberMeToken( token, function( err, uid ) {
			if ( err ) { return done( err ); }
			if ( !uid ) { return done( null, false ); }

			findById( uid, function( err, user ) {
				if ( err ) { return done( err ); }
				if ( !user ) { return done( null, false ); }
				return done( null, user );
			});
		});
	},
	//issueToken
	function( user, done ) {
//        done();
		// get token by user_id
		if ( !user || !user._id ) return done({ user: true });
		collectionTokens.findOne({ uid: user._id }, {}, function( err, doc ) {
			if ( err ) { return done( err ); }
			if ( !doc || !doc.token ) return done({ token: true });
			return done( null, doc.token );
		});
	}
));
function issueToken( user, done ) {
	// random hash
	var token = crypto
			.createHash( 'md5' )
			.update( 'secret' + new Date() + Math.random() )
			.digest( 'hex' );
	// save
	saveRememberMeToken( token, user._id, function( err ) {       // user.id
		if ( err ) { return done( err ); }
		return done( null, token );
	});
}
// Remember-me strategy
function consumeRememberMeToken( token, callback ) {
	collectionTokens.findOne({ token: token }, {}, function( err, doc ) {
		if ( err ) return callback( err || { token: true });
		if ( !doc || !doc.uid ) return callback( null, false );
//        // remove old tokens
//        collectionTokens.remove({ uid: doc.uid }, {}, function( err ) {
//            if ( err ) console.log( 'Can`t remove token from database'.bold.red, token );
//            callback( null, doc.uid );
//        });
		callback( null, doc.uid );
	});
}
function saveRememberMeToken( token, uid, callback ) {
	// remove old tokens
	collectionTokens.remove({ uid: uid }, {}, function( err ) {
		// save new token
		collectionTokens.insert({ token: token, uid: uid }, {}, callback );
	});
}
function removeToken( token, callback ) {
	collectionTokens.remove({ token: token }, {}, function( err ) {
		if ( callback ) callback( err );
	});
}


// Storage

// Local strategy
function findById( id, callback ) {
	//console.log( 'findById', id, { _id: ObjectID( id ) });
	// args
	if ( 'function' != typeof callback ) return;
	if ( !id ) return callback( new Error( 'Bad account id' ));
	// find
	collection.findOne({ _id: ObjectID( id ) }, {}, callback );
}

function findByUsername( username, callback ) {
	// console.log( 'findByUsername', username );
	collection.findOne({ login: username }, {}, callback );
}

function findByUsernameLogin( username, password, callback ) {
	// console.log( 'findByUsernameLogin', username, password );
	var query = {
		login : username,
		password : password
	}
	collection.findOne(query, {}, callback );
}

function findByProperty( prop, value, callback ) {
	//console.log( 'findByProperty', prop, value );
	var query = {};
	query[ prop ] = value;
	collection.findOne( query, {}, callback );
}

// Users list
function users( query, opts, callback ) {
	// args
	if ( 'function' == typeof opts )
		var callback = opts,
			opts = {};
	if ( !callback ) return;

	// options
	if ( !opts ) opts = {};

	// gather
	collection
		.find( query, [], opts || {} )
		.sort({ login: 1 })
		.toArray(
			function( err, docs ) {
				callback( err, docs );
			});
}


// API

exports.byId = findById;
exports.byLogin = findByUsername;
exports.byUsernameLogin = findByUsernameLogin;
exports.byProperty = findByProperty;
exports.users = users;
exports.issueToken = issueToken;
exports.removeToken = removeToken;

// Flags & Checks

// route.auth = { login: true, success: '/url', fail: '/url' }

// route.auth = { logged: true, fail: '/url' }
exports.logged  =
	function( cfg, req, res, next ) {
		console.log( 'api.logged' );
		// success
		if ( req.isAuthenticated() )
			return next();
		// fail
		if ( cfg.fail )
			res.redirect( cfg.fail );
		else
			res.send( 401, 'Not logged in' );
	};

// route.auth = { roles: [ 'role' ], fail: '/url' }
exports.roles =
	function( cfg, req, res, next ) {
		//console.log( 'api.roles', cfg.roles, req.user, cfg );
		// success
		if ( req.user
			&& !! ~cfg.roles.indexOf( req.user.role ))
			return cfg.success
				? res.redirect( cfg.success )
				: next();
		// fail
		//console.log( typeof cfg.fail );
		if ( cfg.fail )
			res.redirect( cfg.fail );
		else {
			//console.log ('***');
			res.send( 403, 'Not permitted role' );
		}
	};


// Service

// CRUD

exports.create =
	function( user, callback ) {

		// todo: move here checking of user existing
		var data = normalizeUser( user );
		if ( !data )
			return callback( new Error( 'Bad user data' ));

		if( user.promo_login && user.promo_password ){
			var query = {
				login : user.promo_login,
				password : user.promo_password
			};
			var unset = {
				login :'',
				password : ''
			};

			collection.update(query, {$unset: unset}, {w:1}, function(err) {
      			if (err) return console.warn(err.message);
      			collection.insert( data, {}, callback );
   		 	});
		}
		else 
			collection.insert( data, {}, callback );
	};

exports.update =
	function( id, user, callback ) {
		var data = normalizeUser( user );
		if ( !data )
			return callback( new Error( 'Bad user data' ));
		collection.update( { _id: ObjectID( id )}, { $set: data }, {}, callback );
	};

exports.remove =
	function( id, callback ) {
		// TODO: improve admin panel
	};

exports.count =
	function( query, callback ) {
		console.log( 'count query !!!!!!!!!!!!!!!!',  query);
		collection.count( query, callback );
	};


// Validate & Format

function normalizeUser( user ) {

	// TODO: Validators (!)
	var u = {};

	if ( !user ) return;
	// password
	if ( user.password
		&& user.password.length < 32 )
	{
		// password hash
		var password = user.password || '',
			hash = crypto
				.createHash( 'md5' )
				.update( password )
				.digest( 'hex' );
		// update
		u.password = user.password;
		u.hash = hash;
	}
	// login
	if ( user.login )
		u.login = user.login;
	// active flag

	if ( undefined !== user.active )
		u.active =  !! user.active;
	// reviewed flag
	if ( undefined !== user.review )
		u.review =  !! user.review;

	// roles
	if ( user.role
		&& config.roles
		&& !!~config.roles.indexOf( user.role ))
		u.role = user.role;

	// type
	if( user.promo_login && user.promo_password )
		u.category = user.promo_login;
		

	// results
	return Object.keys( u ).length
		? u
		: null;
}

