/*!
 * Module: Module
 *
 * @author Andjey Guzhovskiy, <me.the.ascii@gmail.com>
 * @copyright (c) 2013 Andjey Guzhovskiy
 * @licence CLOSED
 * @version 0.0.1
 */

var colors = require( 'colors' ),
    async = require( 'async' ),
    objects = require( './libs/utils/object' ),
    libs = {
        // todo: selective by config
        // log: require( './libs/log' ),
        http: require( './libs/http' ),
        auth: require( './libs/auth' ),
        mail: require( './libs/mail' ),
        cards: require( './libs/cards' ),
        lists: require( './libs/lists' )
    },
    utils = {
        object: require( './libs/utils/object' ),
        parent: require( './libs/utils/parent' ),
        check: require( 'validator' ).validators,
        filter: require( 'validator' ).sanitize,
        ObjectID: require( './libs/utils/objectid' )
    };

console.log(( '\n=== Piezo Service '+ Array( 50).join( '=' )).bold.magenta );

if ( !module.parent )
    Server();
else
    Library();

/**
 * Used as Server
 * @constructor
 */
function Server() {
    var config = { defaults: { mongodb: {}} };
        //require( './config.json' );
    libsConfig( config );
    libsInit( function() {
        console.log( 'PiezoService started'.bold.magenta );
    });
}

/**
 * Used as Library
 * @constructor
 */
function Library() {
    var api = {
        libs: libs,
        utils: utils,
        use: function() {
            // todo: require and fill `libs`
            return api;
        },
        configure: function() {
            libsConfig.apply( this, arguments );
            return api;
        },
        init: function() {
            libsInit.apply( this, arguments );
            return api;
        }
    };
    module.exports = api;
}

function libsConfig( cfg ) {
    var cfg = cfg || {};
    for ( var lib in libs )
        libs[ lib ].configure &&
        libs[ lib ].configure(
            objects.merge({ defaults: cfg.defaults }, cfg[ lib ])
        );
}
function libsInit( callback ) {
    // todo: async
    var cfg = cfg || {},
        inits = [];
    // set inits queue
    for ( var lib in libs )
        if ( libs[ lib ].init )
            inits.push(
                libs[ lib ].init
                    .bind( this, libs ));
    // init libs and callback
    async.parallel( inits, callback );
}